Цель: реализовать сайт на подобии VK.
Функционал:
- Аутентификация
- Профиль и его редактирование
- Страница со всеми пользователями, возможность просматривать чужие профили
- Публикация постов, редактирование, удаление

Доп. функционал:
- пагинация, поиск, фильтрация



Ход разработки:
21.06.2023:
1) Создал базовую структуру работы с БД: файл `lib/db.ts` для подключения к БД, модели поста и юзера.
2) приступил к созданию роутов API для регистрации и авторизации. Здесь подробнее: (хоть я уже и делал)
2.1 - Регистрация. Она строится таким образом: мы отправляем данные в API (из формы регистрации) -> затем проверяем в API, пришли ли эти данные -> переведим их в читаемый вид -> проверяем, есть ли уже пользователи с такой почтой -> кэшируем пароль и создаём новый документ пользователя -> сохраняем в БД данные пользователя -> редиректим на страницу входа.
2.2 - Авторизация. Здесь немного сложнее, т.к. подключаются куки. Эта часть API принимает данные из формы -> также проверяет, что всё передано -> проверяем, есть ли юзер с такой почтой -> сравниваем пароли из формы и БД -> генерируем токены доступа и обновления -> токен доступа сохраняется в куки, а токен обновления в куки и в БД.
3) Авторизация и регистрация реализованы, проверил работу через Postman. Дополнительно делаю выход. Для него нужно просто удалить токены из куки.


22.06.2023:
1) Реализовал UI для регистрации и авторизации
2) Дополнительно подготовлен Header-компонент с условным рендером кнопки авторизации/регистрации/выхода. Реализован так: Через хук узнаём актуальный роут и рендерим ссылки на страницах регистрации и авторизации для взаимного перехода. Также более глобальное условие: проверка наличия токена. Если он есть, то выводим кнопку `logout`, а иначе - что-то из ссылок на регистрацию/авторизацию.
3) Все формы привожу в действие. Форма регистрации отлично сохраняет данные на сервере. Форма авторизации завершается со статусом 200, но куки не сохраняются. Проблему обозначу тут, как найду: (Оказывается, что куки в новой версии Next устаналиваются через NextResponse)
4) Нужно выводить ошибку, почему не проходит авторизация / регистрация. Создадим стейт для каждой формы.
5) Действия 3 и 4 вызвали ряд широких изменений. Пришлось обе формы переделать в клиентские компоненты. Всё потому, что нужно следить за 2 стейтами (ошибка + лоадер отправки данных). Также Мне пришлось убрать файлы `actions.ts` для форм, т.к. они работали с куки на уровне сервера, не устанавливая их на клиенте. Поэтому я не видел токены в браузере во время авторизации, но видел во время отправки запроса через Postman.
Код стал менее удобным в каждой форме, но он понятный и обслуживаемый. Отправка данных может возвращать в UI ошибку с объяснением, что не так. Также кнопка отправки меняется в зависимости от состояния отпарвки запроса.
6) Авторизация выполнена, но пропала кнопка выхода. Решил проблему: оказалось, что я неправильно указал имя свойства из ответа сервера .__.
7) Не работает logout. Скорее всего из-за того, что опять конфликт сервера/клиента. Сейчас переобородую для использования на клиенте. Также есть незначительная проблема: после авторизации в хэдере куки не обновляются без перезагрузки страницы, поэтому кнопка выхода просто не появляется, если не перезагрузить страницу.
Logout заработал, но вот обновление `isAuth` оказалось куда сложнее. Можно подключить провайдер, но это слишком громоздко для такой задачи сейчас. Буду искать другие способы. А пока сохраню проект на GitHub.
8) Я добавил middleware-обработчик, который не давал доступа к любым страницам кроме авторизации и регистрации, если неавторизован. И наоборот не пускал на эти страницы, если уже есть авторизация. Проблема возникла: обработчик захватил ещё и API-маршруты, поэтому он стал блочить запросы, что привело к тому, что они не работали. Поправил, добавив исключение. Теперь всё работает.

Что нужно сделать далее?
- Страница "friends". Логика: запрос всех юзеров, их рендер, динамические пути к их профилям.
- страница "profile". Переход с "friends". Нужно продумать условный рендер для шапки. Чтобы страницы других пользователей мы могли только просматривать, а свою - редактировать. 

23.06.2025
1) Берусь за подключение refresh-токена. В прошлом проекте логика была реализована довольно плохо. Сейчас попробую через отдельный axios-инстанс.

24.06.2025
1) С инстансом ничего не вышло, пробую другие варианты.
Всё удалось: оказалось, что axios-instance используется только для работы с API на клиенте. В middleware же логика другая: мы получаем куки -> проверяем, есть ли токен доступа (ТД) -> если есть, то сверяем и редиректим со страниц авторизации -> если нет ТД, то проверяем токен обновления (ТО) -> если есть, то сверяем его и генерим новый ТД, далее редиректим -> если нет ТО и ТД, а страница блока auth, то даём доступ -> также просто редиректим на страницу авторизации, если нет валидных токенов (если мы оказались на странице не блока auth без токенов).
Логика тяжёлая, но рабочая.
2) Берусь за реализацию страницы 'friends'.